# 부분 집합의 합이 10의 개수를 구하는 함수
# depth : 현재 포함할지/말지를 선택하려고 하는 값의 인덱스

def sum_subset(depth, num_sum):
    global result  # 전역 변수의 값을 변경시키기 위한 global 키워드 활용

    # 종료시점
    if depth == N:  # 앞에 요소들을 포함할지/말지를 다 결정했다는 의미.
        if num_sum == 10:
            result += 1
        return

    # num_sum(누적합)
    # 누적합이 10을 넘어서면 더이상 더할 필요가 없음
    # 문제에서 주어진 숫자들이 다 0을 넘어선다.
    # 이거 가지치기인데 진짜 조심히 써야됨.
    # ex) 기본테케에 양수만 줘놓고 조건에 음수도 가능 or 내부테케에 음수 들어가있으면 절대 안되는 가지치기.
    if num_sum >= 10:
        return

    # depth에 해당하는 친구를 부분집합에 포함시키기로 결정했으면
    # 포함시키는 경우 -> 누적에 해당 depth 에 해당하는 값을 누적해서 전달
    sum_subset(depth + 1, num_sum + arr[depth])

    # 포함시키지 않기로 결정했으면
    # depth만 +1 해주고, 누적값은 그대로 전달
    sum_subset(depth + 1, num_sum)
    pass

N = 10
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
result = 0  # 부분집합의 합이 10인 부분집합의 개수

'''
재귀를 구현할 때 파라미터를 뭘로 할지 고민 많이 함.
결국 재귀라는 건 종료를 해야한다. 종료조건이 필수.

1. 재귀 호출을 중단시킬 파라미터 -> 현재 포함할건지/말건지를 정할 요소의 인덱스
2. 우리가 원하는 누적값 -> 현재까지 선택한 숫자들의 합

이 2개로 웬만한 재귀 돌아감.
=====번외=====
도저히 모르고 감이 안와 시작도 못하겠으면
모든 변수를 다 넣고 -> 필요없으면 코드 작성하다가 지우고, 필요하면 만들기
'''
sum_subset(0, 0)

print(result)